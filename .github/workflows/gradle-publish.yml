
name: Build Publish Quarkus 

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build-project:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'adopt'
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Build with Gradle
        run: |
          ./gradlew clean build \
          -Dquarkus.kubernetes.ports."http".host-port=4003 \
          -Dquarkus.container-image.build=true \
          -Dquarkus.container-image.push=true \
          -Dquarkus.container-image.registry=registry.hub.docker.com \
          -Dquarkus.container-image.group=brunoar7 \
          -Dquarkus.container-image.username=${{ secrets.DOCKER_USERNAME }} \
          -Dquarkus.container-image.password=${{ secrets.DOCKER_PASSWORD }} \
          -Dquarkus.kubernetes.namespace=vkpr \
          -Dquarkus.kubernetes.ingress.expose=true \
          -Dquarkus.kubernetes.ingress.ingress-class-name=kong \
          -Dquarkus.kubernetes.ingress.host=rest.apr.vee.codes \
          -Dquarkus.kubernetes.ingress.tls."rest.apr.vee.codes-tls".enabled=true \
          -Dquarkus.kubernetes.ingress.tls."rest.apr.vee.codes-tls".hosts=rest.apr.vee.codes \
          -Dquarkus.kubernetes.ingress.annotations."backstage.io/kubernetes-id"=quarkus-sample-app \
          -Dquarkus.kubernetes.ingress.annotations."cert-manager.io/cluster-issuer"=certmanager-issuer \
          -Dquarkus.kubernetes.ingress.annotations."konghq.com/https-redirect-status-code"=308 \
          -Dquarkus.kubernetes.ingress.annotations."konghq.com/preserve-host"=true \
          -Dquarkus.kubernetes.ingress.annotations."konghq.com/protocols"=https \
          -Dquarkus.kubernetes.ingress.annotations."konghq.com/strip-path"=true \
          -Dquarkus.kubernetes.ingress.annotations."kubernetes.io/tls-acme"=true
      - name: Generating Kubernetes config for Kong
        run: |
          npx insomnia-inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml

      - name: Publish K8S Artifact
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          source_file: 'build/kubernetes/kubernetes.yml'
          destination_repo: veecode-platform/argocd-repository
          destination_folder: '/quarkusbr/'
          destination_branch: apr
          user_email: 'veecode-bot@vee.codes'
          user_name: 'veecode-bot'
          commit_message: 'A custom message for the commit'

  publish-spec:
    runs-on: ubuntu-latest
    env:
      NAME: ""    
    steps:
      - uses: actions/checkout@v3
      - name: Install yq
        run: |
          wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          chmod a+x /usr/local/bin/yq
          yq --version

      - name: "Check if insomnia workspace is present"
        id: check_inso_workspace
        uses: andstor/file-existence-action@v1
        with:
          files: ".insomnia/ApiSpec/spc_*.yml"

      - name: Setup Insomnia CLI
        if: steps.check_inso_workspace.outputs.files_exists == 'true'
        uses: kong/setup-inso@v1
        with:
          inso-version: 3.12.0

      - name: Exporting openapi from insomnia workspace
        if: steps.check_inso_workspace.outputs.files_exists == 'true'
        run: |
          inso export spec "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')"  --output ./openapi-swagger.yaml

      - name: Setup Insomnia CLI
        uses: kong/setup-inso@v1
        with:
          inso-version: 3.12.0

      - name: Generating Kubernetes config for Kong
        run: |
          inso generate config "$(cat .insomnia/ApiSpec/spc_*.yml | yq '.fileName')" --type kubernetes --output ./k8s/kong-kubernetes.yaml
      
      - name: Build devportal template
        env:
          NAME: ""
          PATH_API: ""
        run: |
          mkdir -p api/
          NAME=`echo $GITHUB_REPOSITORY |awk -F / '{print $2 }'`
          echo $NAME
          touch "api/$NAME.yaml"
          sed --in-place "s|\"|'|g" ./openapi-swagger.yaml
          yq eval ".apiVersion = \"backstage.io/v1alpha1\"" -i "api/$NAME.yaml"
          yq eval ".kind = \"API\" " -i "api/$NAME.yaml"
          yq eval ".metadata.name=strenv(NAME)" -i "api/$NAME.yaml"
          yq eval ".metadata.title=strenv(NAME)" -i "api/$NAME.yaml"
          yq eval ".metadata.publishedAt=\"$(date '+%Y-%m-%d %T')\"" -i "api/$NAME.yaml"
          yq eval ".metadata.description= \"$(cat ./openapi-swagger.yaml | yq e '.info.description')\"" -i "api/$NAME.yaml"
          yq eval ".spec.type = \"openapi\"" -i "api/$NAME.yaml"
          yq eval ".spec.lifecycle = \"production\"" -i "api/$NAME.yaml"
          yq eval ".spec.owner = \"consumer\"" -i "api/$NAME.yaml"
          yq eval ".spec.definition = \"$(yq -I4 ./openapi-swagger.yaml)\"" --inplace "api/$NAME.yaml"

      - name: Publish to spec house
        uses: dmnemec/copy_file_to_another_repo_action@main
        env:
          API_TOKEN_GITHUB: ${{ secrets.API_TOKEN_GITHUB }}
        with:
          destination_branch: main
          source_file:  'api'
          destination_repo: veecode-platform/devportal-catalog
          destination_folder: '/'
          user_name: ${{ github.actor }}
          commit_message: 'Pipeline commit'
